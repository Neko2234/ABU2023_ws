// Generated by gencpp from file fabot_msgs/ArmMsg.msg
// DO NOT EDIT!


#ifndef FABOT_MSGS_MESSAGE_ARMMSG_H
#define FABOT_MSGS_MESSAGE_ARMMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fabot_msgs
{
template <class ContainerAllocator>
struct ArmMsg_
{
  typedef ArmMsg_<ContainerAllocator> Type;

  ArmMsg_()
    : hand(0)
    , arm(0)
    , hand_duty(0)
    , arm_duty(0)  {
    }
  ArmMsg_(const ContainerAllocator& _alloc)
    : hand(0)
    , arm(0)
    , hand_duty(0)
    , arm_duty(0)  {
  (void)_alloc;
    }



   typedef int16_t _hand_type;
  _hand_type hand;

   typedef int16_t _arm_type;
  _arm_type arm;

   typedef int16_t _hand_duty_type;
  _hand_duty_type hand_duty;

   typedef int16_t _arm_duty_type;
  _arm_duty_type arm_duty;





  typedef boost::shared_ptr< ::fabot_msgs::ArmMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fabot_msgs::ArmMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ArmMsg_

typedef ::fabot_msgs::ArmMsg_<std::allocator<void> > ArmMsg;

typedef boost::shared_ptr< ::fabot_msgs::ArmMsg > ArmMsgPtr;
typedef boost::shared_ptr< ::fabot_msgs::ArmMsg const> ArmMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fabot_msgs::ArmMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fabot_msgs::ArmMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fabot_msgs::ArmMsg_<ContainerAllocator1> & lhs, const ::fabot_msgs::ArmMsg_<ContainerAllocator2> & rhs)
{
  return lhs.hand == rhs.hand &&
    lhs.arm == rhs.arm &&
    lhs.hand_duty == rhs.hand_duty &&
    lhs.arm_duty == rhs.arm_duty;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fabot_msgs::ArmMsg_<ContainerAllocator1> & lhs, const ::fabot_msgs::ArmMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fabot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fabot_msgs::ArmMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fabot_msgs::ArmMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fabot_msgs::ArmMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fabot_msgs::ArmMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fabot_msgs::ArmMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fabot_msgs::ArmMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fabot_msgs::ArmMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e5814a5ce25cfec12c99674e013cee3";
  }

  static const char* value(const ::fabot_msgs::ArmMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e5814a5ce25cfecULL;
  static const uint64_t static_value2 = 0x12c99674e013cee3ULL;
};

template<class ContainerAllocator>
struct DataType< ::fabot_msgs::ArmMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fabot_msgs/ArmMsg";
  }

  static const char* value(const ::fabot_msgs::ArmMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fabot_msgs::ArmMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 hand\n"
"int16 arm\n"
"int16 hand_duty\n"
"int16 arm_duty\n"
;
  }

  static const char* value(const ::fabot_msgs::ArmMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fabot_msgs::ArmMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hand);
      stream.next(m.arm);
      stream.next(m.hand_duty);
      stream.next(m.arm_duty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fabot_msgs::ArmMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fabot_msgs::ArmMsg_<ContainerAllocator>& v)
  {
    s << indent << "hand: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hand);
    s << indent << "arm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arm);
    s << indent << "hand_duty: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hand_duty);
    s << indent << "arm_duty: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arm_duty);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FABOT_MSGS_MESSAGE_ARMMSG_H
